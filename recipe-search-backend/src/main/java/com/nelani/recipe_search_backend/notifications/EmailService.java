package com.nelani.recipe_search_backend.notifications;

import com.nelani.recipe_search_backend.dto.RecipeDto;
import com.nelani.recipe_search_backend.mapper.RecipeMapper;
import com.nelani.recipe_search_backend.model.Recipe;
import com.nelani.recipe_search_backend.repository.RecipeRepository;
import lombok.extern.slf4j.Slf4j;
import org.springframework.mail.javamail.JavaMailSender;
import jakarta.mail.internet.MimeMessage;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import java.util.stream.Collectors;

@Slf4j
@Service
public class EmailService {

    private final JavaMailSender mailSender;
    private final RecipeRepository recipeRepository;

    public EmailService(JavaMailSender mailSender, RecipeRepository recipeRepository) {
        this.mailSender = mailSender;
        this.recipeRepository = recipeRepository;
    }

    // New method: fetch + map to DTO in the main thread (transaction still open)
    public void prepareAndSendEmail(String toEmail, String publicId) {
        Recipe recipe = recipeRepository.findByPublicId(publicId)
                .orElseThrow(() -> new IllegalArgumentException("Invalid recipe Id."));

        // Convert entity to DTO BEFORE async call
        RecipeDto dto = RecipeMapper.mapRecipeWithAllDetails(recipe);

        // Send DTO asynchronously
        emailRecipe(toEmail, dto);
    }

    @Async("emailTaskExecutor")
    public void emailRecipe(String toEmail, RecipeDto recipeDto) {
        String subject = "AI Recipe Generator - " + recipeDto.getName();

        // Ingredients with quantity
        String ingredientsHtml = recipeDto.getIngredients().stream()
                .map(i -> "<li>" + i.getQuantity() + " " + i.getName() + "</li>")
                .collect(Collectors.joining());

        // Steps with estimated time
        String stepsHtml = recipeDto.getSteps().stream()
                .map(s -> "<li>" + s.getDescription() + " (Estimated: " + s.getEstimatedMinutes() + " min)</li>")
                .collect(Collectors.joining());

        // Email template
        String htmlContent = """
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>AI Recipe Generator</title>
      </head>
      <body style="font-family: Arial, sans-serif; color: #333; background: #f9f9f9; margin: 0; padding: 0;">
        <div style="max-width: 500px; width: 100%%; margin: auto; background: #fff">
          <div style="padding: 1px 20px 0 20px">
            <h2 style="margin: 20px 0">AI Recipe Generator</h2>
          </div>

          <div style="padding: 0 20px 40px">
            <h2 style="color: #2e86c1; margin: 40px 0 20px 0">Hi there,</h2>
            <p style="line-height: 1.6">
              Your custom recipe <strong>%s</strong> has been generated by AI!
            </p>
            
            <p><strong>Meal Type:</strong> %s</p>
            <p><strong>Cook Time:</strong> %d minutes</p>

            <h3 style="margin-top:30px; color:#2e86c1;">Ingredients:</h3>
            <ul style="line-height:1.6;">%s</ul>

            <h3 style="margin-top:30px; color:#2e86c1;">Steps:</h3>
            <ol style="line-height:1.6;">%s</ol>

            <hr style="margin: 30px 0; border: none; border-top: 1px solid #ccc" />

            <p style="font-size: 13px; color: #666; text-align: center">
              Need help? Visit our
              <a href="https://yourwebsite.com/support" style="color: #2e86c1; text-decoration: none">Help Center</a>
              or reply to this email.
            </p>

            <p style="font-size: 12px; color: #999; text-align: center; margin-top: 15px;">
              AI Recipe Generator â€“ Where every dish is unique.
            </p>
          </div>
        </div>
      </body>
    </html>
    """.formatted(
                recipeDto.getName(),
                recipeDto.getMealType(),         // Meal Type
                recipeDto.getCookTimeMinutes(),  // Cook Time
                ingredientsHtml,
                stepsHtml
        );

        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
            helper.setTo(toEmail);
            helper.setSubject(subject);
            helper.setText(htmlContent, true);

            mailSender.send(message);
        } catch (Exception e) {
            log.error("Failed to send email to {} with subject '{}'", toEmail, subject, e);
        }
    }
}
